class Solution {
    public int maximalRectangle(char[][] matrix) {
        int heights[]=new int[matrix[0].length];

        int maxans=Integer.MIN_VALUE;

        for(char i=0;i<matrix.length;i++)
        {
            for(char j=0;j<matrix[0].length;j++)
            {
                if(matrix[i][j]=='1')
                {
                    heights[j]+=1;
                }
                else{
                    heights[j]=0;
                }
            }
            int currans=maxhistogram(heights);
            maxans=Math.max(currans,maxans);
        }
        return maxans;

        
    }
    public static int maxhistogram(int heights[])
    {
        int maxarea=0;
        int nsr[]=new int[heights.length];
        int nsl[]=new int[heights.length];

        //next smallest right
        Stack<Integer>s=new Stack<>();

        for(int i=heights.length-1;i>=0;i--)
        {
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i])
            {
                s.pop();
            }
            if(s.isEmpty())
            {
               nsr[i]=heights.length;
            }
            else{
                nsr[i]=s.peek();
            }
            s.push(i);
        }

        //next smallest left
        s=new Stack<>();
        
        for(int i=0;i<heights.length;i++)
        {
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i])
            {
                s.pop();
            }
            if(s.isEmpty())
            {
                nsl[i]=-1;
            }
            else{
                nsl[i]=s.peek();
            }
            s.push(i);
        }
        for(int i=0;i<heights.length;i++)
        {
            int height=heights[i];
            int width=nsr[i]-nsl[i]-1;

            int currarea=height*width;

            maxarea=Math.max(maxarea,currarea);

        }
        return maxarea;


    }
}
